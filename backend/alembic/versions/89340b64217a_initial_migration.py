"""Initial migration

Revision ID: 89340b64217a
Revises: 
Create Date: 2025-10-05 07:58:06.875102

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '89340b64217a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.String(length=255), nullable=False),
    sa.Column('model_name', sa.String(length=255), nullable=False),
    sa.Column('provider', sa.String(length=100), nullable=False),
    sa.Column('context_length', sa.Integer(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('supports_streaming', sa.Boolean(), nullable=True),
    sa.Column('pricing', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('model_id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('prompts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('user_prompt', sa.Text(), nullable=False),
    sa.Column('system_prompt', sa.Text(), nullable=True),
    sa.Column('ai_response', sa.Text(), nullable=True),
    sa.Column('model_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_prompts_created_at'), 'prompts', ['created_at'], unique=False)
    op.create_index(op.f('ix_prompts_user_id'), 'prompts', ['user_id'], unique=False)
    op.create_table('executions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.String(length=255), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('top_p', sa.Float(), nullable=True),
    sa.Column('top_k', sa.Integer(), nullable=True),
    sa.Column('frequency_penalty', sa.Float(), nullable=True),
    sa.Column('presence_penalty', sa.Float(), nullable=True),
    sa.Column('repetition_penalty', sa.Float(), nullable=True),
    sa.Column('min_p', sa.Float(), nullable=True),
    sa.Column('top_a', sa.Float(), nullable=True),
    sa.Column('seed', sa.Integer(), nullable=True),
    sa.Column('reasoning_effort', sa.String(length=50), nullable=True),
    sa.Column('request_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tokens_prompt', sa.Integer(), nullable=True),
    sa.Column('tokens_completion', sa.Integer(), nullable=True),
    sa.Column('tokens_total', sa.Integer(), nullable=True),
    sa.Column('cost_prompt', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('cost_completion', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('cost_total', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('time_to_first_token_ms', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_executions_created_at'), 'executions', ['created_at'], unique=False)
    op.create_index(op.f('ix_executions_prompt_id'), 'executions', ['prompt_id'], unique=False)
    op.create_index(op.f('ix_executions_user_id'), 'executions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_executions_user_id'), table_name='executions')
    op.drop_index(op.f('ix_executions_prompt_id'), table_name='executions')
    op.drop_index(op.f('ix_executions_created_at'), table_name='executions')
    op.drop_table('executions')
    op.drop_index(op.f('ix_prompts_user_id'), table_name='prompts')
    op.drop_index(op.f('ix_prompts_created_at'), table_name='prompts')
    op.drop_table('prompts')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('model_configs')
    # ### end Alembic commands ###
